<BR><h1>The ocelotgui user manual</h1>  
<BR>  
<BR>Version 0.5.0, June 19 2015  
<BR>  
<BR>  
<BR>Copyright (c) 2014 by Ocelot Computer Services Inc. All rights reserved.  
<BR>  
<BR>This program is free software; you can redistribute it and/or modify  
<BR>it under the terms of the GNU General Public License as published by  
<BR>the Free Software Foundation; version 2 of the License.  
<BR>  
<BR>This program is distributed in the hope that it will be useful,  
<BR>but WITHOUT ANY WARRANTY; without even the implied warranty of  
<BR>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  
<BR>GNU General Public License for more details.  
<BR>  
<BR>You should have received a copy of the GNU General Public License  
<BR>along with this program; if not, write to the Free Software  
<BR>Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA  
<BR>  
<BR>  
<BR><h2>Executive Summary</h2>  
<BR>  
<BR>The ocelotgui application, more fully  
The Ocelot Graphical User Interface', allows users to connect to  
a MySQL or MariaDB DBMS server, enter SQL statements, and receive results.  
Some of its features are: syntax highlighting, user-settable colors  
and fonts for each part of the screen, and result-set displays  
with multi-line rows and resizable columns, and a debugger.  
<BR>  
<BR><h2>The company, the product, and the status</h2>  
<BR>  
<BR>Ocelot Computer Services is a Canadian company  
which has specialized in database products for thirty years.  
Its two employees both worked for MySQL AB and  
Sun Microsystems and Oracle between 2003 and 2011.  
<BR>  
<BR>The ocelotgui program is a front end which connects to MySQL (tm) or MariaDB (tm).  
In some ways it is like the basic mysql client program,  
with added GUI features: full-screen editing, syntax  
highlighting, tabular display, customized fonts and colors.  
It differs from some other front-end GUI products because  
it is open source (GPL), is written in C++, and it makes use  
of the Qt multi-platform widget library.  
<BR>  
<BR>The product status is: alpha. It has been known to work as described in  
this manual on several Linux distros but it would be premature  
to recommend use with critical production systems. We are making only   
one guarantee, that we will try to address any bug reports  
and answer questions from people examining the source code.  
<BR>  
<BR><h2>Downloading, installing, and building</h2>  
<BR>  
<BR>To download the product go to  
https://github.com/ocelot-inc/ocelotgui.  
Instructions for installation will be in the README.txt file.  
This location may change, or alternate locations may appear.  
If so there will either be an announcement on github or on ocelot.ca.  
<BR>  
<BR>The package contains source code, and  
two executable files, one for use with Qt version 4 and the  
other for use with Qt version 5.  
The executables are built dynamically.  
They look for pre-installed copies of Qt libraries and of the  
MySQL client library -- see the README.txt file about these.  
The executables were built with Ubuntu 12.04 and may not work  
well on other Linux distros -- if that is the case, consult  
the README.txt and the source code to see how to build from  
source.  
<BR><h2>Starting</h2>  
<BR>  
<BR>There must be an instance of MySQL or MariaDB running somewhere.  
<BR>  
<BR>If connection is possible with the mysql client and does not require  
unusual options, then connection is possible with ocelotgui. If there is  
a my.cnf file, ocelotgui will read it, just as the mysql client would.  
If there are connection-related options on the command line, ocelotgui  
will accept them just as the mysql client would. Therefore the typical  
way to start the program is to say  
ocelotgui [--option [, option...]]  
<BR>  
<BR>If a password is required but not supplied, or if the initial  
attempt to connect fails, a dialog box will appear.  
Fill in or correct the fields on the dialog box and click OK.  
If the connection still fails, then ocelotgui will still come up,  
but only non-DBMS tasks such as screen customizing will be possible.  
<BR>  
<BR>In any case, an initial screen will appear. After some activity has  
taken place, the screen will have four parts, from top to bottom:  
<BR>menu  
<BR>history widget, where retired statements and diagnostics end up  
<BR>results widget, where SELECT result sets appear  
<BR>statement widget, where users can type in instructions.  
<BR>Initially, though, only the menu and statement widget will appear.  
<BR>  
<BR>Again, this should be reminiscent of the way the mysql client works:  
statements are typed at the bottom of the screen, and appear to  
scroll off the top after they are executed, with results in the middle.  
<BR>  
<BR><h2>Statement widget</h2>  
<BR>  
<BR>The statement widget is an editable multi-line text box.  
The usual control keys that work on other text editors will work  
here too; see the later description of Menu Item: Edit.  
<BR>  
<BR>The program includes a tokenizer and can recognize the parts of  
speech in typical MySQL grammar. It will do syntax highlighting  
by changing the color, for example comments will appear in red,  
dentifiers in blue, operators in green, and so on.  
The colors can be  
customized, see the later description of Menu Item: Settings.  
<BR>  
<BR>The left side of the statement widget is reserved for the prompt,  
and cannot be typed over. Initially the prompt will be 'mysql&gt;',  
but this can be changed, see the later description of  
Client Statements: Prompt.  
<BR>  
Once a statement has been entered and is ready to be executed,  
the user can hit control-E, choose menu item Run|Execute, or  
place the cursor at the end of the text (after the ';' or other  
delimiter) and type Enter. It is legal to enter multiple  
statements, separated by semicolons, and then execute them  
in a single sequence.  
<BR>  
<BR><h2>Client statements</h2>  
<BR>  
<BR>A client statement is a statement which changes some behavior  
of the client (that is, of the ocelotgui front end) but does not  
necessarily go to the MySQL/MariaDB server. Of the statements  
that the MySQL Reference manual describes in section  
'mysql commands' http://dev.mysql.com/doc/refman/5.6/en/mysql-commands.html  
<BR>  
<BR>the ocelotgui program has working equivalents for: clear, delimiter, exit,  
prompt, source, and warnings. For example, entering 'quit;'  
followed by Enter will cause the program to stop. It is  
sometimes not mandatory to end a client statement with ';',  
but is strongly recommended.  
<BR>  
<BR>There are some enhancements affecting the PROMPT statement.  
The special sequence '&#92;2' means 'repeat the prompt on all lines',  
and the special sequence '&#92;L' means 'show line numbers'. For example,  
'PROMPT &#92;2&#92;Lmariadb;' will change the prompt so that each line begins  
with '[line number] mariadb>'.  
<BR>  
<BR><h2>History widget</h2>  
<BR>  
<BR>Once a statement has been executed, a copy of the statement text  
and the diagnostic result (for example: 0.04 seconds, OK) will  
be placed in the history widget. Everything in the history widget  
is editable including the prompt, and it simply fills up so that  
after a while the older statements are scrolled off the screen.  
Thus its main function is to show what recent statements and  
results were. Statements in the history can be retrieved while  
the focus is on the statement widget, by selecting 'Previous statement'  
or 'Next statement' menu items.  
<BR>  
<BR><h2>Result widget</h2>  
<BR>  
<BR>If a statement is SELECT or SHOW or some other statement that  
returns a result set, it will appear in the result widget in  
the middle area of the screen. The result widget is split up  
into columns. Each column has a header and details taken from  
what the DBMS returns.  
<BR>  
<BR>The width of the column depends on the result set's definition,  
but extremely wide columns will be split onto multiple lines.  
That is, one result-set row may take up to five lines.  
If the data still is too wide or too tall to fit in the cell,  
then the cell will get a vertical scroll bar. The user can  
change the width of a column by dragging the column's right  
border to the right to make the column wider, or to the left  
to make it narrower.  
<BR>  
The result widget as a whole may have a horizontal and a vertical  
scroll bar. The vertical scroll bar moves a row at a time rather  
than a pixel at a time -- this makes large result sets more  
manageable, but makes the vertical scroll bar unresponsive if  
each row has multiple lines and the number of rows is small.  
<BR>  
<BR><h2>Menu</h2>  
<BR>  
<BR>The menu at the top of the screen has File, Settings, Run,  
Exit and Help.  
<BR>  
<BR>File|Connect, or Ctrl+O, starts the Connect dialog box.  
<BR>File|Exit, or Ctrl+Q, stops the program.  
<BR>  
<BR>Edit|Undo or Ctrl+Z, , Edit|Redo or Ctrl+Shift+Z, Edit|Cut  
or Ctrl+X, Edit|Copy , Edit|Cut, Edit|Copy, Edit|Paste,  
and Edit|Select All work in the conventional manner,  
except Edit|Redo which can only redo the last change.  
<BR>  
<BR>Run|Execute or Ctrl+E or Ctrl+Enter causes execution of whatever is in the  
statement widget.  
<BR>  
<BR>Settings|Statement Widget: Colors + Fonts,  
Settings|Grid Widget: Colors + Fonts,  
Settings|History Widget: Colors + Fonts, and  
Settings|Main Widget: Colors + Fonts are the  
items which affect the behavior of each of each  
individual widget. The color settings affect foregrounds,  
backgrounds, borders, and (for the statement widget only)  
the syntax highlights. The font settings affect font family,  
boldness, italics, and size. Both color and font settings  
involve further dialog boxes which are standard with Qt.  
There may be additional choices affecting appearance,  
for example the width of the border used to drag columns  
in the result widget.  
<BR>  
<BR>Help|About will show the license and copyright and version.  
Help|Manual will show the manual.  
<BR>  
<BR><h2>Debugger</h2>  
NEW: it's possible to debug stored procedures and functions.  
This version of ocelotgui incorporates MDBug  
(read about MDBug at http://bazaar.launchpad.net/~hp-mdbug-team/mdbug/trunk/view/head:/debugger.txt).  
All debugger insructions can be entered on the ocelotgui command line;  
some operations can also be done via the Debug menu or by clicking on the stored-procedure display.  
Currently-supported instructions are:  
<BR>$install -- this is always the first thing to do  
<BR>$setup routine_name [, routine_name ...] -- prepares so '$debug routine_name' is possible  
<BR>$debug routine_name -- starts a debug session, shows routines in a tabbed widget  
<BR>$breakpoint routine_name line_number or Debug|breakpoint -- sets a breakpoint  
<BR>$clear routine_name line_number -- clears a breakpoint  
<BR>$next or Debug|Next -- goes to next executable line, without dropping into subroutines  
<BR>$step or Debug|Step -- goes to next executable line, will drop into subroutines  
<BR>$continue or Debug|Continue -- executes until breakpoint or until end of procedure  
<BR>$refresh breakpoints -- refreshes xxxmdbug.breakpoints table  
<BR>$refresh server_variables -- refreshes xxxmdbug.server_variables table  
<BR>$refresh variables -- refreshes xxxmdbug.variables table  
<BR>$refresh user_variables -- refereshes xxxmdbug.user_variables table  
<BR>$exit or Debug|Exit -- stops a debug session  
<BR>  
For a walk through a debugger example, with screenshots, see  
this blog post: ocelot.ca/blog/the-ocelotgui-debugger.  
<BR>  
<BR><h2>Recent Enhancements</h2>  
<BR>  
Here are new features which work (or work more correctly) when ocelotgui is built  
from source, and will appear in binary executables  
when the next release occurs.  
<BR>Vertical: If a user starts the program with ocelotgui --vertical=1  
or ends a statement with backslash G, results come up with one column per row.  
<BR>Images: If a user chooses Options | display BLOB as image from the menu,  
and selects rows which contain LONGBLOB columns, and the column values are  
images (such as PNG or JPEG or BMP or GIF format data), ocelotgui will display  
the result as images.  
<BR>Result-set editing: If a user clicks on a column in the result set  
and makes a change, an update statement will appear in the statement widget.  
For example, if a result set is the result from SELECT column1, column2 FROM t;,  
and the column1 value is 5, and the column2 value is 'ABC', and the user changes  
the column2 value to 'AB', then the  
statement widget will show UPDATE t SET column2 = 'AB' WHERE column1 = 5 AND column2 = 'AB';.  
The user then has the choice of ignoring the update statement or executing it.  
<BR>Detaching: If a user chooses Options | detach history widget or  
Options | detach result grid widget, then the widget will become a separate window  
which can be moved or resized.  
<BR>Colors: The Colors and fonts dialog boxes now have a simpler way to choose  
colors, by selecting from a choice of 148 color names / color icons. Users can also  
change colors by saying SET object_name_color = color-name | hex-rgb-value.  
<BR>Run|Kill: When an SQL statement is taking a long time, the menu changes so  
that Run|Execute (Ctrl+E) is disabled and Run|Kill (Ctrl+C) is enabled.  
Selecting Run|Kill stops the statement if possible.  
<BR>  
<BR><h2>Contact</h2>  
<BR>  
<BR>Bug reports and feature requests may go on  
https://github.com/ocelot-inc/ocelotgui/issues.  
<BR>  
There may be announcements from time to time on Ocelot's  
web page (ocelot.ca) or on the employee blog (ocelot.ca/blog).  
This manual may also be available on ocelot.ca soon.  
<BR>  
<BR>Any contributions will be appreciated.  